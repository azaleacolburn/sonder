use crate::lexer::CType;

pub type LineNumber = usize;

#[derive(Debug, Clone)]
pub struct VarData {
    // Usage / Block
    pub references: Vec<Reference>, // References held to this variable
    pub usages: Vec<Usage>,

    // General Information
    pub var_type: CType,
    pub ptr_to: None,
    pub rc: bool,
    pub clone: bool, // Cloned value (generated by sonder)
    pub is_mut_by_ptr: bool,
    pub is_mut_direct: bool,

    // Struct handling
    pub instanceof_struct: Option<String>,
    pub fieldof_struct: Option<FieldInfo>,
}

/// Represents a singlular usage of a variable, not including its reference being taken

#[derive(Debug, Clone)]
pub struct Usage {
    line: LineNumber,
    usage_type: UsageType,
}

#[derive(Debug, Clone)]
pub enum UsageType {
    FunctionArg,
    RValue,
    LValue,
}

/// Represents a span where a variable is behind a reference
/// A Reference is extended when the variable holding the reference is used
/// NOTe: Could be extended to Block soon

#[derive(Debug, Clone)]
pub struct Reference {
    reference_type: ReferenceType,
    borrower: String,
    start: LineNumber,
    end: LineNumber,
}

#[derive(Debug, Clone)]
pub enum ReferenceType {
    MutBorrowed,
    ConstBorrowed,
}

impl Reference {}

#[derive(Debug, Clone, PartialEq, Eq)]
pub struct FieldInfo {
    struct_id: String,
    field_id: String,
}
